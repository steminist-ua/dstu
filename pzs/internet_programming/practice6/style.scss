/*

Властивість flex дозволяє вказати параметри елемента, щоб він ефективно заповнював доступний простір. Елементи можуть бути розтягнуті пропорційно з урахуванням заданого співвідношення або стиснуті, щоб цілком вмістити всі елементи без переносів в один рядок.  

Наглядний гайд по Flex - https://css-tricks.com/snippets/css/a-guide-to-flexbox/

*/

.wrapper{
    height: 100vh;
    // width: 100vw;
    display: flex;

    /* flex-direction встановлює напрямок головної осі батьківського контейнера (по якій вісі будуть вирівняні нащадки цього батьківського елементу)

    row
    елементи розташовуються в один рядок зліва направо.

    row-reverse
    Схоже на значення row, але міняються місцями початкова і кінцева точки і головна вісь спрямована справа наліво (елементи відображаються починаючи з останнього до першого).

    column
    Флекс елементи відображаються у вигляді стовпчика. Стовпчик формується зверху вниз.

    column-reverse
    Головна вісь розташовується вертикально, але змінюється положення початкової і кінцевої точок і вісь спрямована знизу вгору (елементи відображаються починаючи з останнього до першого).
    */

    flex-direction: row;
    // flex-direction: column;
    // flex-direction: row-reverse;
    // flex-direction: column-reverse;


    /* flex-wrap визначає, чи елементи мають розташовуватися примусово на одному рядку або можуть бути перенесені на наступний рядок. Якщо встановлено, щоб елементи переносилися на декілька рядків, властивість також визначає поперечну вісь, яка визначає напрям, за яким складаються нові рядки.

    nowrap
    Знесення заборонене. Гнучкі елементи шикуються в одну лінію.

    wrap
    Гнучкі елементи шикуються в кілька рядків, їх напрямок задається властивістю flex-direction. Тобто, якщо вони не вміщуються в рядок (через свою кількість та/або розміри), то вони будуть переноситися на новий рядок, а не звужуватися та залишатися в одному рядку. 

    wrap-reverse
    Гнучкі елементи шикуються в кілька рядків, в напрямку, протилежному flex-direction.
    */
    flex-wrap: nowrap;


    /* flex-flow - це скорочена властивість для властивостей:
        flex-direction (відповідає за напрямок шикування гнучких елементів)
        flex-wrap (забороняє чи дозволяє знесення гнучких елементів)
    */
    flex-flow: row nowrap;

    // justify-content вирівнює елементи гнучкого контейнера, коли елементи не використовують ввесь доступний простір на головній осі контейнера (по горизонталі)

    // flex-start - Елементи розташовані на початку контейнера.
    justify-content: flex-start;

    // Елементи розташовані в кінці контейнера.
    // justify-content: flex-end;

    // Елементи розташовані в центрі контейнера
    // justify-content: center;

    // Флекси рівномірно розподіляються по всьому рядку. Перший і останній флекс притискаються до відповідних країв контейнера.
    // justify-content: space-between;

    // Флекси рівномірно розподіляються по всьому рядку. Порожній простір перед першим і після останнього елементів дорівнює половині простору між двома сусідніми елементами.
    // justify-content: space-around;
    // justify-content: space-evenly;

    // align-items вирівнює елементи всередині рядків гумового контейнера в перпендикулярному (горизонтальному) напрямку. Властивість подібна до justify-content, але працює лише у перпендикулярному напрямку.

    // Елементи розташовані на початку контейнера.
    align-items: flex-start;

    // Елементи розташовані в кінці контейнера.
    // align-items: flex-end;
    // align-items: center;
    // align-items: stretch;

    // Елементи розташовані на базовій лінії контейнера (відповідно до текстового змісту).
    // align-items: baseline;

    // align-content задає вирівнювання для кожного рядка гумового елемента по перпендикулярній (вертикальній) вісі. Ця властивість схожа align-items, але замість вирівнювання гнучких елементів, він вирівнює рядки в гнучких елементах. Вона працює як justify-content, але вирівнює не окремі елементи, а цілий рядок у багаторядковому контейнері, якщо є додатковий простір у вертикальному напрямку.

    // Рядки розташовуються на початку поперечної вісі.
    align-content: flex-start;

    // Рядки розташовуються з кінця поперечної осі.
    // align-content: flex-end;
    // align-content: center;
    // align-content: stretch;

    // Рядки рівномірно розподіляються в гумовому контейнері. Перший рядок знаходиться на початку контейнера, а останній перебуває в кінці.
    // align-content: space-between;

    // Рядки рівномірно розподілені з рівними відстанями між ними. Порожній простір перед першим рядком і після останнього рядка дорівнює половині простору між двома сусідніми рядками.
    // align-content: space-around;

    // задає проміжок між рядками та стовпчиками одночасно
    gap: 20px;

    // row-gap задає проміжок між рядками.
    row-gap: 100px;

    // column-gap задає проміжок між стовпчиками.
    column-gap: 100px;

    @media screen and (max-width: 600px){
        flex-direction: column;
    }

    &__item{
        background-color: aqua;
        background-image: url("");
        background-size: cover;
        background-size: contain;
        border: 1px solid black;
        width: 100px;

        @media screen and (max-width: 600px){
            font-size: 20px;
        }
        
    }

    &__item2{
        flex-grow: 2;
    }


}
// body{
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     align-content: center;
//     height: 100vh;
// }
// div{
//     width: 100px;
//     height: 100px;
//     background-color: blueviolet;
// }